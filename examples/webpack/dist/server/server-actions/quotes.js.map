{"version":3,"file":"server/server-actions/quotes.js","mappings":"SAAA;SACA;;;;;UCDA;UACA;UACA;UACA;UACA,yCAAyC,wCAAwC;UACjF;UACA;UACA,E;;;;;UCPA,wF;;;;;UCAA;UACA;UACA;UACA,uDAAuD,iBAAiB;UACxE;UACA,gDAAgD,aAAa;UAC7D,E;;;;;;;;;;;;;ACNA,YAAY;;AACL,eAAeA,QAAQA,CAAA,EAAG;EAC7B,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAGC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;EACvD,MAAME,MAAM,GAAG,CACX;IACIC,IAAI,EAAE,uEAAuE;IAC7EC,MAAM,EAAE;EACZ,CAAC,EACD;IACID,IAAI,EAAE,qDAAqD;IAC3DC,MAAM,EAAE;EACZ,CAAC,EACD;IACID,IAAI,EAAE,wFAAwF;IAC9FC,MAAM,EAAE;EACZ,CAAC,EACD;IACID,IAAI,EAAE,qDAAqD;IAC3DC,MAAM,EAAE;EACZ,CAAC,EACD;IACID,IAAI,EAAE,6CAA6C;IACnDC,MAAM,EAAE;EACZ,CAAC,EACD;IACID,IAAI,EAAE,mCAAmC;IACzCC,MAAM,EAAE;EACZ,CAAC,EACD;IACID,IAAI,EAAE,wEAAwE;IAC9EC,MAAM,EAAE;EACZ,CAAC,EACD;IACID,IAAI,EAAE,4CAA4C;IAClDC,MAAM,EAAE;EACZ,CAAC,EACD;IACID,IAAI,EAAE,qEAAqE;IAC3EC,MAAM,EAAE;EACZ,CAAC,EACD;IACID,IAAI,EAAE,2FAA2F;IACjGC,MAAM,EAAE;EACZ,CAAC,CACJ;EACD,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,MAAM,CAACO,MAAM,CAAC;EAC7D,OAAOP,MAAM,CAACG,WAAW,CAAC;AAC9B;AACO,eAAeK,sBAAsBA,CAAA,EAAG;EAC3C,MAAM,IAAIX,OAAO,CAAEC,OAAO,IAAGC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;EACvD,OAAO,OAAO;AAClB,C","sources":["webpack://forket-example/webpack/bootstrap","webpack://forket-example/webpack/runtime/define property getters","webpack://forket-example/webpack/runtime/hasOwnProperty shorthand","webpack://forket-example/webpack/runtime/make namespace object","webpack://forket-example/./build/server/server-actions/quotes.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","'use server';\nexport async function getQuote() {\n    await new Promise((resolve)=>setTimeout(resolve, 2000));\n    const quotes = [\n        {\n            text: \"The only limit to our realization of tomorrow is our doubts of today.\",\n            author: \"Franklin D. Roosevelt\"\n        },\n        {\n            text: \"In the middle of every difficulty lies opportunity.\",\n            author: \"Albert Einstein\"\n        },\n        {\n            text: \"Success is not final, failure is not fatal: it is the courage to continue that counts.\",\n            author: \"Winston Churchill\"\n        },\n        {\n            text: \"Do what you can, with what you have, where you are.\",\n            author: \"Theodore Roosevelt\"\n        },\n        {\n            text: \"It always seems impossible until it's done.\",\n            author: \"Nelson Mandela\"\n        },\n        {\n            text: \"Happiness depends upon ourselves.\",\n            author: \"Aristotle\"\n        },\n        {\n            text: \"The future belongs to those who believe in the beauty of their dreams.\",\n            author: \"Eleanor Roosevelt\"\n        },\n        {\n            text: \"Simplicity is the ultimate sophistication.\",\n            author: \"Leonardo da Vinci\"\n        },\n        {\n            text: \"Your time is limited, so don’t waste it living someone else’s life.\",\n            author: \"Steve Jobs\"\n        },\n        {\n            text: \"Not everything that can be counted counts, and not everything that counts can be counted.\",\n            author: \"Albert Einstein\"\n        }\n    ];\n    const randomIndex = Math.floor(Math.random() * quotes.length);\n    return quotes[randomIndex];\n}\nexport async function getTotalNumberOfQuotes() {\n    await new Promise((resolve)=>setTimeout(resolve, 2000));\n    return 1342989;\n}\n"],"names":["getQuote","Promise","resolve","setTimeout","quotes","text","author","randomIndex","Math","floor","random","length","getTotalNumberOfQuotes"],"sourceRoot":""}