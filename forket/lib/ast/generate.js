import path from 'path';
import fs from 'fs';
import swc from '@swc/core';
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const TOP_COMMENT = "/* This file is auto-generated by Forket. Don't change it manually. */\n\n";
const FILES = [
  {
    codeFile: path.join(__dirname, "clientBoundaryWrapper", "/code.js"),
    generator: function (ast) {
      let json = JSON.stringify(ast.body[0], null, 2);
      json = json.replace(/"\ComponentName"/g, 'componentName + "Boundary"');
      json = json.replace(/"boundary_f_1"/g, '"boundary_" + id');
      json = json.replace(/"boundary_children_f_1"/g, '"boundary_children_" + id');
      json = json.replace(/"boundary_props_f_1"/g, '"boundary_props_" + id');
      json = json.replace(/"boundary_setup_f_1"/g, '"boundary_setup_" + id');
      json = json.replace(/"value": "ProductsList"/g, '"value": componentName');
      json = json.replace(/\\"f_1\\"/g, '\\"" + id + "\\"');
      json = json.replace(/\\"ProductsList\\"/g, '\\"" + componentName + "\\"');
      return `export default function (id, componentName) {
  return ${json}
}`;
    }
  },
  {
    codeFile: path.join(__dirname, "importCommonJS", "/code.js"),
    generator: function (ast) {
      let json = JSON.stringify(ast.body, null, 2);
      json = json.replace(/"React"/g, "what");
      json = json.replace(/"react"/g, "where");
      json = json.replace(/\\"react\\"/g, '\\"" + where + "\\"');
      return `export default function (what, where) {
  return ${json}
}`;
    }
  },
  {
    codeFile: path.join(__dirname, "importESM", "/code.js"),
    generator: function (ast) {
      let json = JSON.stringify(ast.body, null, 2);
      json = json.replace(/"React"/g, "what");
      json = json.replace(/"react"/g, "where");
      json = json.replace(/\\"react\\"/g, '\\"" + where + "\\"');
      return `export default function (what, where) {
  return ${json}
}`;
    }
  },
  {
    codeFile: path.join(__dirname, "exposeGlobal", "/code.js"),
    generator: function (ast) {
      let json = JSON.stringify(ast.body, null, 2);
      json = json.replace(/"Foo"/g, "windowKey");
      json = json.replace(/"Bar"/g, "value");
      return `export default function (windowKey, value) {
  return ${json}
}`;
    }
  }
];


(async function() {
  FILES.forEach(async file => {
    const code = fs.readFileSync(file.codeFile, "utf8");
    const dir = path.dirname(file.codeFile);
    const { parse } = swc;
    const ast = await parse(code, {
      syntax: "typescript",
      tsx: true,
      decorators: false
    });
    fs.writeFileSync(path.join(dir, 'ast.json'), JSON.stringify(ast, null, 2));
    fs.writeFileSync(path.join(dir, "index.js"), TOP_COMMENT + file.generator(ast));
  });
})();